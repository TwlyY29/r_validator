test.create_vector_from_20_to_30_onestep <- function(){
res <- create_vector_from_20_to_30_onestep()
checkEquals(length(res), 11, "length of list")
checkTrue(res[2]-res[1] == 1, "step size")
checkEqualsNumeric(res, 20:30, "values")
}
test.create_vector_from_30_to_35_onestep <- function(){
res <- create_vector_from_30_to_35_onestep()
checkEquals(length(res), 6, "length of list")
checkTrue(res[2]-res[1] == 1, "step size")
checkEqualsNumeric(res, 30:35, "values")
}
n_cases <- 2
test_cases <- c(
"test.create_vector_from_20_to_30_onestep","test.create_vector_from_30_to_35_onestep"
)
cases_function_names <- c(
"create_vector_from_20_to_30_onestep","create_vector_from_30_to_35_onestep"
)
if(!interactive()){
args <- commandArgs(trailingOnly=TRUE)
solution <- args[1]
}else{
solution <- "123456/solution.R"
}
n_tests_running <- 0
solution <- "/home/mirco/datadrop/102__coding/30-39__teaching/31__rvalid/solution.R"
n_tests_running <- 0
print <- function(what){
write(what, stdout())
}
checkEquals <- function(obj1, obj2, what, tolerance = .Machine$double.eps^0.5, checkNames=TRUE){
n_tests_running <<- n_tests_running+1
if (!identical(TRUE, checkNames)) {
names(obj1)  <- NULL
names(obj2) <- NULL
}
result <- all.equal(obj1, obj2, tolerance=tolerance)
if(identical(result, TRUE)){
print(paste0("@OK@",what))
}else{
print(paste0("@FAIL@",what))
}
}
checkEqualsNumeric <- function(obj1, obj2, what, tolerance = .Machine$double.eps^0.5){
n_tests_running <<- n_tests_running+1
result <- all.equal.numeric(as.vector(obj1), as.vector(obj2), tolerance=tolerance)
if(identical(result, TRUE)){
print(paste0("@OK@",what))
}else{
print(paste0("@FAIL@",what))
}
}
checkTrue <- function(expr, what){
n_tests_running <<- n_tests_running+1
result <- eval(expr)
names(result) <- NULL
if (identical(result, TRUE)){
print(paste0("@OK@",what))
}else{
print(paste0("@FAIL@",what))
}
}
checkIdentical <- function(obj1, obj2, what){
n_tests_running <<- n_tests_running+1
result <- identical(target, current)
if (identical(TRUE, result)) {
print(paste0("@OK@",what))
}else{
print(paste0("@FAIL@",what))
}
}
checkError <- function(expr, what, silent=TRUE){
n_tests_running <<- n_tests_running+1
if (inherits(try(eval(expr, envir=parent.frame()), silent=silent), "try-error")){
print(paste0("@OK@",what))
}else{
print(paste0("@FAIL@",what))
}
}
# set up a sandboxed environment
sandbox <- new.env(parent=.GlobalEnv)
# try to source student solution catching syntax errors
res <- try(sys.source(solution, envir=sandbox), silent=T)
if (inherits(res, "try-error")) {
#~   print(paste0("@ERROR@Error while loading your solution:\n",geterrmessage()))
print("@ERROR@Error while loading your solution")
}else{
void <- sapply(1:n_cases, function(i){
n_tests_running <<- 0
print(paste0("@START@",cases_function_names[i]))
# add test function to sandbox environment
environment(test_cases[i]) <- sandbox
#~     sys.source(paste0(test_cases_basedir,"/",test_cases_sourcefiles[i]), envir=sandbox)
func <- get(test_cases[i], envir=sandbox)
# execute function
res <- try(func())
print(paste0("@NTESTS@",n_tests_running))
})
print("@END@")
}
i <- 1
n_tests_running <<- 0
print(paste0("@START@",cases_function_names[i]))
# add test function to sandbox environment
environment(test_cases[i]) <- sandbox
View(sandbox)
test_cases[i]
# add test function to sandbox environment
environment(`test_cases[i]`) <- sandbox
# add test function to sandbox environment
environment(get(test_cases[i])) <- sandbox
# add test function to sandbox environment
func <- get(test_cases[i])
environment(func) <- sandbox
View(sandbox)
#~     sys.source(paste0(test_cases_basedir,"/",test_cases_sourcefiles[i]), envir=sandbox)
func <- get(test_cases[i], envir=sandbox)
# execute function
res <- try(func())
test_create_vector_from_20_to_30_onestep <- function(){
res <- create_vector_from_20_to_30_onestep()
checkEquals(length(res), 11, "length of list")
checkTrue(res[2]-res[1] == 1, "step size")
checkEqualsNumeric(res, 20:30, "values")
}
test_create_vector_from_30_to_35_onestep <- function(){
res <- create_vector_from_30_to_35_onestep()
checkEquals(length(res), 6, "length of list")
checkTrue(res[2]-res[1] == 1, "step size")
checkEqualsNumeric(res, 30:35, "values")
}
n_cases <- 2
test_cases <- c(
"test_create_vector_from_20_to_30_onestep","test_create_vector_from_30_to_35_onestep"
)
cases_function_names <- c(
"create_vector_from_20_to_30_onestep","create_vector_from_30_to_35_onestep"
)
i <- 1
# set up a sandboxed environment
sandbox <- new.env(parent=.GlobalEnv)
# try to source student solution catching syntax errors
res <- try(sys.source(solution, envir=sandbox), silent=T)
print(paste0("@START@",cases_function_names[i]))
# add test function to sandbox environment
func <- get(test_cases[i])
environment(func) <- sandbox
#~     sys.source(paste0(test_cases_basedir,"/",test_cases_sourcefiles[i]), envir=sandbox)
func <- get(test_cases[i], envir=sandbox)
# execute function
res <- try(func())
View(sandbox)
?environment
# add test function to sandbox environment
ls()
# add test function to sandbox environment
ls()[test_cases[i]]
# add test function to sandbox environment
which(ls() == test_cases[i])
# add test function to sandbox environment
ls()[which(ls() == test_cases[i])]
func <-
environment(match.fun(test_cases[i])) <- sandbox
func <- match.fun(test_cases[i])
environment(func) <- sandbox
#~     sys.source(paste0(test_cases_basedir,"/",test_cases_sourcefiles[i]), envir=sandbox)
func <- get(test_cases[i], envir=sandbox)
# execute function
res <- try(func())
test_create_vector_from_20_to_30_onestep <- function(env){
res <- env$create_vector_from_20_to_30_onestep()
checkEquals(length(res), 11, "length of list")
checkTrue(res[2]-res[1] == 1, "step size")
checkEqualsNumeric(res, 20:30, "values")
}
test_create_vector_from_30_to_35_onestep <- function(env){
res <- env$create_vector_from_30_to_35_onestep()
checkEquals(length(res), 6, "length of list")
checkTrue(res[2]-res[1] == 1, "step size")
checkEqualsNumeric(res, 30:35, "values")
}
func <- match.fun(test_cases[i])
environment(func) <- sandbox
#~     sys.source(paste0(test_cases_basedir,"/",test_cases_sourcefiles[i]), envir=sandbox)
func <- get(test_cases[i], envir=sandbox)
# execute function
res <- try(func(sandbox))
func <- get(test_cases[i])
environment(func) <- sandbox
#~     sys.source(paste0(test_cases_basedir,"/",test_cases_sourcefiles[i]), envir=sandbox)
func <- get(test_cases[i], envir=sandbox)
# execute function
res <- try(func(sandbox))
# add test function to sandbox environment
func <- get(test_cases[i])
environment(func) <- sandbox
# execute function
res <- try(func(sandbox))
test_create_vector_from_20_to_30_onestep <- function(env=environment()){
res <- env$create_vector_from_20_to_30_onestep()
checkEquals(length(res), 11, "length of list")
checkTrue(res[2]-res[1] == 1, "step size")
checkEqualsNumeric(res, 20:30, "values")
}
test_create_vector_from_30_to_35_onestep <- function(env=environment()){
res <- env$create_vector_from_30_to_35_onestep()
checkEquals(length(res), 6, "length of list")
checkTrue(res[2]-res[1] == 1, "step size")
checkEqualsNumeric(res, 30:35, "values")
}
n_cases <- 2
test_cases <- c(
"test_create_vector_from_20_to_30_onestep","test_create_vector_from_30_to_35_onestep"
)
cases_function_names <- c(
"create_vector_from_20_to_30_onestep","create_vector_from_30_to_35_onestep"
)
if(!interactive()){
args <- commandArgs(trailingOnly=TRUE)
solution <- args[1]
}else{
solution <- "123456/solution.R"
solution <- "/home/mirco/datadrop/102__coding/30-39__teaching/31__rvalid/solution.R"
}
n_tests_running <- 0
print <- function(what){
write(what, stdout())
}
checkEquals <- function(obj1, obj2, what, tolerance = .Machine$double.eps^0.5, checkNames=TRUE){
n_tests_running <<- n_tests_running+1
if (!identical(TRUE, checkNames)) {
names(obj1)  <- NULL
names(obj2) <- NULL
}
result <- all.equal(obj1, obj2, tolerance=tolerance)
if(identical(result, TRUE)){
print(paste0("@OK@",what))
}else{
print(paste0("@FAIL@",what))
}
}
checkEqualsNumeric <- function(obj1, obj2, what, tolerance = .Machine$double.eps^0.5){
n_tests_running <<- n_tests_running+1
result <- all.equal.numeric(as.vector(obj1), as.vector(obj2), tolerance=tolerance)
if(identical(result, TRUE)){
print(paste0("@OK@",what))
}else{
print(paste0("@FAIL@",what))
}
}
checkTrue <- function(expr, what){
n_tests_running <<- n_tests_running+1
result <- eval(expr)
names(result) <- NULL
if (identical(result, TRUE)){
print(paste0("@OK@",what))
}else{
print(paste0("@FAIL@",what))
}
}
checkIdentical <- function(obj1, obj2, what){
n_tests_running <<- n_tests_running+1
result <- identical(target, current)
if (identical(TRUE, result)) {
print(paste0("@OK@",what))
}else{
print(paste0("@FAIL@",what))
}
}
checkError <- function(expr, what, silent=TRUE){
n_tests_running <<- n_tests_running+1
if (inherits(try(eval(expr, envir=parent.frame()), silent=silent), "try-error")){
print(paste0("@OK@",what))
}else{
print(paste0("@FAIL@",what))
}
}
# set up a sandboxed environment
sandbox <- new.env(parent=.GlobalEnv)
# try to source student solution catching syntax errors
res <- try(sys.source(solution, envir=sandbox), silent=T)
i <- 1
n_tests_running <<- 0
print(paste0("@START@",cases_function_names[i]))
# add test function to sandbox environment
func <- get(test_cases[i])
environment(func) <- sandbox
# execute function
res <- try(func())
#~     sys.source(paste0(test_cases_basedir,"/",test_cases_sourcefiles[i]), envir=sandbox)
func <- get(test_cases[i], envir=sandbox)
# execute function
res <- try(func())
.GlobalEnv
# execute function
res <- try(func(sandbox))
